[["Sean", "https://plus.google.com/107270646379592003271", "gp-1330014672111", "<p>This is something that is near and dear to my heart right now because I've been going through a LOT of interviews.  (I'm good enough to get through 4 rounds of interviews, but not good enough to hire, apparently.)  Things I've thought of/seen:\n<br>\n1)  Interview length.  If you're going to have the candidate talk to 6-8 people, try to put the most important people in slots 2-4.  That's enough for the candidate to warm up, but not so many they'll be completely burnt out.  \n<br>\n2)  Coordinate questions.  I've had a lot of interview where everyone asked me the same questions.  If I'm rocking the questions, great.  But if it's from a gap in my knowledge, I'm screwed.  Either way, you're not getting a representative view of what I know or can do.\n<br>\n3)  Get the candidate on a keyboard.  STAY WITH THEM.  In fact, pair program with them.  This gets you two things.  a)  You learn how comfy they are with the tools and the OS.  From my point of view, maybe because so many of the people I work with right now aren't interested in becoming efficient at the fundamentals, this is important.  b)  You get to see them in action and learn how they work with someone.  \n<br>\n4)  Have them do a project in a language they don't know.  Ideally, this would be done remotely, but on a sandbox you can record and watch.  It's important to try and get a sense of how people learn.  One interview I did had a little of this, allowing me to code in a recorded text box on a website.  It did not record any googling, and it didn't have any options for running the code internally, which means in order to do testing, I had to copy the code to a local terminal.  It's a start.  Something like a recorded version of CodingBat (\n<a href=\"http://codingbat.com\">http://codingbat.com</a>\n) could be better.  A VM that records everything would be best.  Give them a few days to get it done.  Encourage them to ask you questions and interact with you during the project.\n<br>\n<br>\nThese have been some of my biggest complaints about the interview processes of TripAdvisor, ITA, and a couple of others.</p>", 1330014672], ["David&nbsp;Chudzicki", "https://plus.google.com/106120852580068301475", "gp-1330035684714", "<p>hard problem. small sample size.\n<br>\n<br>\ntangentially, do you have an applicant tracking system you like?</p>", 1330035684], ["Jeff&nbsp;Kaufman", "https://plus.google.com/103013777355236494008", "gp-1330036271477", "<p>We use jobvite, but I don't interact with it.</p>", 1330036271], ["David&nbsp;Chudzicki", "https://plus.google.com/106120852580068301475", "gp-1330036492377", "<p>cool. We have Resumator right now, and I'm unhappy with it. Need better e-mail integration. Hope jobvite has that. Jobvite salesperson will supposedly contact me today.</p>", 1330036492], ["Allison", "https://plus.google.com/103741579182942078941", "gp-1330043210903", "<p>When I was interviewing folks, one of my coworkers printed out a piece of code with lots of errors in it and asked the candidate to identify as many errors as possible.  He said nobody ever got them all, but it gave him a good sense of what they knew.\n<br>\n<br>\nWhat was going on in those interviews was not just testing how well they did technically, but also seeing how well they interacted with their potential coworkers.  For example, if they can ask questions when they needed to, they might grow into a better employee than someone who's already pretty good.</p>", 1330043210], ["Jeff&nbsp;Kaufman", "https://plus.google.com/103013777355236494008", "gp-1330292702237", "<p>@<a href=\"https://plus.google.com/103741579182942078941\">Allison</a>\n: I like that this tests code reading.\n<br>\n<br>\n+Everyone: All these ideas about \nhow\n to interview people don't get into the question of how we know whether a particular strategy works.</p>", 1330292702], ["Jeffrey", "https://plus.google.com/102674891971910831082", "gp-1331097072276", "<p>I don't like the trial project approach after seeing it fail 100% of the time (albeit on a small set of cases). It is hard to pick an important non-trivial project where you can stomach the risk of a candidate flaming out. \n<br>\n<br>\nIt is also very unappealing to a candidate already holding a decent full time job - who wants to work double time for a few weeks (or it is a trivial project?) or quit with a non-trivial chance at having neither job in a month? \n<br>\n<br>\nIt is a pretty bad start to say you want to hire someone (which you are doing with the trial project) but you want an explicit option to fire them for the next option or two. That option is almost always there with the main exception of top level management with golden parachutes - talking about it puts a bad slant on the relationship. \n<br>\n<br>\nAnother issue is that this option always gets raised for borderline candidates, and inevitably they are neglected and doomed to failure by management. This makes the trial period into a self fulfilling prophecy for failure. You structure it because you are worried about failure, you spend little time on the person because you are worried about failure, and you stack the odds for failure. If you want to see how they will really perform under normal circumstances, you have to hire them that way. \n<br>\n<br>\nOne more bonus complication with trial periods - they are really bad for anyone with visa issues. We lost a good candidate because someone wanted to hedge their bets, so the candidate kept interviewing until they found someone who would sponsor him. And we had decided we liked him...\n<br></p>", 1331097072]]